diff --git a/node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol b/node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol
index 9985059..309b7e8 100644
--- a/node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol
+++ b/node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity >=0.4.0 <0.8.0;
+pragma solidity ^0.8.0;
 
 /// @title Contains 512-bit math functions
 /// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision
@@ -61,7 +61,7 @@ library FullMath {
         // Factor powers of two out of denominator
         // Compute largest power of two divisor of denominator.
         // Always >= 1.
-        uint256 twos = -denominator & denominator;
+        uint256 twos = uint256(-int256(denominator) & int256(denominator));
         // Divide denominator by power of two
         assembly {
             denominator := div(denominator, twos)
diff --git a/node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol b/node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol
index ee48fee..b801a61 100644
--- a/node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol
+++ b/node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0-or-later
-pragma solidity >=0.5.0 <0.8.0;
+pragma solidity ^0.8.0;
 
 /// @title Math library for computing sqrt prices from ticks and vice versa
 /// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports
@@ -22,7 +22,7 @@ library TickMath {
     /// at the given tick
     function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {
         uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));
-        require(absTick <= uint256(MAX_TICK), 'T');
+        require(absTick <= uint256(uint24(MAX_TICK)), 'T');
 
         uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;
         if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
